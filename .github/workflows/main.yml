# This is a basic workflow to help you get started with Actions

name: Synfig CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build-macos:
    # The type of runner that the job will run on
    runs-on: macos-10.15
    #runs-on: macos-11.0
    name: MacOS 10.15 Catalina (CMake+Ninja)

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
    
      - name: Prepare ccache timestamp
        id: ccache_timestamp
        run: echo "::set-output name=timestamp::`date "+%Y%m%d-%H%M%S"`"
        
      - name: Download ccache archive
        id: ccache-archive
        uses: actions/cache@v2.1.3
        with:
          path: .ccache
          key: ${{ runner.os }}-ccache-${{ steps.ccache_timestamp.outputs.timestamp }}
          restore-keys:
            ${{ runner.os }}-ccache-

      - name: Install dependencies (Brew)
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
          HOMEBREW_NO_ANALYTICS: 1
        run: ./1-setup-osx-brew.sh

      - name: Setup ccache parameters and show statistics
        run: |
          ccache --set-config=compression=true
          ccache --set-config=cache_dir=${GITHUB_WORKSPACE}/.ccache
          ccache --show-stats
          ccache --show-config

      - name: Build (CMake+Ninja)
        run: |
          mkdir build-cmake && cd build-cmake
          cmake -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=./install -DCMAKE_BUILD_TYPE=Release ..
          ninja

      - name: ccache statistics
        run: ccache --show-stats

  build-ubuntu16:
    # The type of runner that the job will run on
    runs-on: ubuntu-16.04
    name: Ubuntu 16.04 Xenial (Autotools)

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
    
      - name: Prepare ccache timestamp
        id: ccache_timestamp
        run: echo "::set-output name=timestamp::`date "+%Y%m%d-%H%M%S"`"
        
      - name: Download ccache archive
        id: ccache-archive
        uses: actions/cache@v2.1.3
        with:
          path: .ccache
          key: ${{ runner.os }}-ccache-${{ steps.ccache_timestamp.outputs.timestamp }}
          restore-keys:
            ${{ runner.os }}-ccache-

      - name: Install dependencies (apt)
        run: |
          ./1-setup-linux-native.sh
          sudo apt-get install ccache

      - name: Setup ccache parameters and show statistics
        run: |
          ccache --set-config=compression=true
          ccache --set-config=cache_dir=${GITHUB_WORKSPACE}/.ccache
          ccache --show-stats
          ccache --print-config

      - name: Build (Autotools+Make)
        run: |
          export PATH="/usr/lib/ccache/:${PATH}"
          echo ${PATH}
          ./2-build-debug.sh

      - name: ccache statistics
        run: ccache --show-stats

  build-ubuntu20:
    # The type of runner that the job will run on
    runs-on: ubuntu-20.04
    name: Ubuntu 20.04 Xenial (CMake+Ninja)

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
    
      - name: Prepare ccache timestamp
        id: ccache_timestamp
        run: echo "::set-output name=timestamp::`date "+%Y%m%d-%H%M%S"`"
        
      - name: Download ccache archive
        id: ccache-archive
        uses: actions/cache@v2.1.3
        with:
          path: .ccache
          key: ubuntu-20.04-ccache-${{ steps.ccache_timestamp.outputs.timestamp }}
          restore-keys:
            ${{ runner.os }}-ccache-

      - name: Install dependencies (apt)
        run: |
          ./1-setup-linux-native.sh
          sudo apt-get install ccache

      - name: Setup ccache parameters and show statistics
        run: |
          ccache --set-config=compression=true
          ccache --set-config=cache_dir=${GITHUB_WORKSPACE}/.ccache
          ccache --show-stats
          ccache --print-config

      - name: Build (Autotools+Make)
        run: |
          mkdir build-cmake && cd build-cmake
          cmake -GNinja -DCMAKE_CXX_COMPILER_LAUNCHER=ccache -DCMAKE_C_COMPILER_LAUNCHER=ccache -DCMAKE_INSTALL_PREFIX=./install -DCMAKE_BUILD_TYPE=Release ..
          ninja

      - name: ccache statistics
        run: ccache --show-stats
